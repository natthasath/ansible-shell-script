# playbooks/wp_users_export.yml
---
- name: Export WordPress users for all ISPConfig sites (domain-named CSVs)
  hosts: servers
  gather_facts: false
  become: true

  vars:
    # Export base on CONTROLLER
    export_base: "{{ lookup('env','HOME') }}/ansible-lab/export/user"
    # ISPConfig clients root
    clients_root: "/var/www/clients"
    # Match .../clients/clientX/webY/web
    web_dir_regex: "^/var/www/clients/client[^/]+/web[^/]+/web$"
    # Path/name of wp-cli on REMOTE hosts (adjust if needed)
    wp_bin: "wp"
    # Filename date stamp on CONTROLLER (YYYY-MM-DD)
    date_stamp: "{{ lookup('pipe', 'date +%F') }}"

  tasks:
    # 1) Discover WordPress roots
    - name: Find directories under {{ clients_root }}
      ansible.builtin.find:
        paths: "{{ clients_root }}"
        file_type: directory
        recurse: true
        depth: 5
      register: found_dirs

    - name: Filter only WordPress roots (â€¦/clientX/webY/web)
      ansible.builtin.set_fact:
        web_dirs: >-
          {{
            found_dirs.files
            | selectattr('path', 'match', web_dir_regex)
            | map(attribute='path')
            | list
          }}

    - name: Fail if no WordPress web roots found
      ansible.builtin.fail:
        msg: "No WP web roots matched {{ web_dir_regex }} under {{ clients_root }}"
      when: web_dirs | length == 0

    # 2) Identify site user from directory owner
    - name: Stat each web root to get owner (site user)
      ansible.builtin.stat:
        path: "{{ item }}"
        follow: true
      loop: "{{ web_dirs }}"
      loop_control:
        label: "{{ item }}"
      register: web_stats

    - name: Build sites list [{path, user, name}]
      ansible.builtin.set_fact:
        sites: "{{ sites | default([]) + [ {
          'path': item.item,
          'user': (item.stat.pw_name | default('root')),
          'name': (item.item | regex_replace('.*/(client[^/]+)/([^/]+)/web$', '\\1_\\2'))} ] }}"
      loop: "{{ web_stats.results }}"
      loop_control:
        label: "{{ item.item }}"

    # 3) Get real site URL (home) and derive filename-friendly domain
    - name: Get primary site URL (home) for each WP root
      ansible.builtin.command:
        argv:
          - "{{ wp_bin }}"
          - option
          - get
          - home
          - "--path={{ item.path }}"
          - "--skip-plugins"
          - "--skip-themes"
      become_user: "{{ item.user }}"
      register: home_urls
      changed_when: false
      failed_when: false
      loop: "{{ sites }}"
      loop_control:
        label: "{{ item.name }} ({{ item.user }}) -> {{ item.path }}"

    - name: Merge domain filename (fname) into sites list
      ansible.builtin.set_fact:
        sites_named: >-
          {{
            sites_named | default([]) + [
              item.0 | combine({
                'fname': (
                  (item.1.stdout | default('') | trim) != ''
                ) | ternary(
                    (item.1.stdout | default('') | trim
                     | regex_replace('^https?://', '')
                     | regex_replace('/.*$', '')
                     | regex_replace(':.*$', '')
                     | regex_replace('[^A-Za-z0-9._-]', '_')),
                    item.0.name
                  )
              })
            ]
          }}
      with_together:
        - "{{ sites }}"
        - "{{ home_urls.results }}"

    # 4) Ensure export folder for this host on CONTROLLER
    - name: Ensure export folder exists on controller for this host
      ansible.builtin.file:
        path: "{{ export_base }}/{{ inventory_hostname }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      become: false

    # 5) Run `wp user list` as site user and export CSV
    - name: List users via wp-cli for each site (CSV, fields=ID,user_login,user_email,roles,registered)
      ansible.builtin.command:
        argv:
          - "{{ wp_bin }}"
          - user
          - list
          - "--path={{ item.path }}"
          - "--fields=ID,user_login,user_email,roles,registered"
          - "--format=csv"
      become_user: "{{ item.user }}"
      register: wp_user_results
      changed_when: false
      failed_when: false
      loop: "{{ sites_named }}"
      loop_control:
        label: "{{ item.fname }} ({{ item.user }}) -> {{ item.path }}"

    - name: Write per-site USER CSV to controller (domain-based filenames)
      ansible.builtin.copy:
        content: "{{ item.stdout }}"
        dest: "{{ export_base }}/{{ inventory_hostname }}/{{ item.item.fname }}_users-{{ date_stamp }}.csv"
        mode: "0644"
      when: item.rc == 0
      delegate_to: localhost
      become: false
      loop: "{{ wp_user_results.results }}"
      loop_control:
        label: "{{ item.item.fname }}_users-{{ date_stamp }}.csv"

    # Optional: write errors for failed sites (controller)
    - name: Write error logs for failed sites (controller)
      ansible.builtin.copy:
        content: |-
          Host: {{ inventory_hostname }}
          Site: {{ item.item.fname }}
          Path: {{ item.item.path }}
          User: {{ item.item.user }}
          RC: {{ item.rc }}
          STDOUT:
          {{ item.stdout }}
          STDERR:
          {{ item.stderr }}
        dest: "{{ export_base }}/{{ inventory_hostname }}/{{ item.item.fname }}_users-{{ date_stamp }}.ERROR.txt"
        mode: "0644"
      when: item.rc != 0
      delegate_to: localhost
      become: false
      loop: "{{ wp_user_results.results }}"
      loop_control:
        label: "{{ item.item.fname }}_users-{{ date_stamp }}.ERROR.txt"

    # 6) Summary
    - name: Summary
      ansible.builtin.debug:
        msg: |-
          Host: {{ inventory_hostname }}
          Export dir (controller): {{ export_base }}/{{ inventory_hostname }}
          Sites processed: {{ sites_named | length }}
          OK: {{ (wp_user_results.results | selectattr('rc','equalto',0) | list | length) }}, FAILED: {{ (wp_user_results.results | selectattr('rc','ne',0) | list | length) }}
